-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | TUI for managing a Hydra node
--   
--   TUI for managing a Hydra node
@package hydra-tui
@version 0.14.0

module Hydra.TUI.Drawing.Utils
drawHex :: SerialiseAsRawBytes a => a -> Widget n
drawShow :: forall a n. Show a => a -> Widget n
maybeWidget :: (a -> Widget n) -> Maybe a -> Widget n
ellipsize :: Int -> Text -> Text

module Hydra.TUI.Forms
utxoCheckboxField :: forall s e n. (s ~ Map TxIn (TxOut CtxUTxO, Bool), n ~ Text) => Map TxIn (TxOut CtxUTxO) -> Form s e n
utxoRadioField :: forall s e n. (s ~ (TxIn, TxOut CtxUTxO), n ~ Text) => Map TxIn (TxOut CtxUTxO) -> Form s e n
confirmRadioField :: forall s e n. (s ~ Bool, n ~ Text) => Form s e n

module Hydra.TUI.Handlers.Global
handleVtyQuitEvents :: Event -> EventM n s ()
handleVtyGlobalEvents :: Event -> EventM n s ()

module Hydra.TUI.Logging.Types
data Severity
Success :: Severity
Info :: Severity
Error :: Severity
data LogMessage
LogMessage :: Severity -> Text -> UTCTime -> LogMessage
[severity] :: LogMessage -> Severity
[message] :: LogMessage -> Text
[time] :: LogMessage -> UTCTime
data LogVerbosity
Short :: LogVerbosity
Full :: LogVerbosity
data LogState
LogState :: [LogMessage] -> LogVerbosity -> LogState
[logMessages] :: LogState -> [LogMessage]
[logVerbosity] :: LogState -> LogVerbosity
logVerbosityL :: Lens' LogState LogVerbosity
logMessagesL :: Lens' LogState [LogMessage]
instance GHC.Generics.Generic Hydra.TUI.Logging.Types.Severity
instance GHC.Show.Show Hydra.TUI.Logging.Types.Severity
instance GHC.Classes.Eq Hydra.TUI.Logging.Types.Severity
instance GHC.Generics.Generic Hydra.TUI.Logging.Types.LogMessage
instance GHC.Show.Show Hydra.TUI.Logging.Types.LogMessage
instance GHC.Classes.Eq Hydra.TUI.Logging.Types.LogMessage
instance GHC.Generics.Generic Hydra.TUI.Logging.Types.LogVerbosity
instance GHC.Show.Show Hydra.TUI.Logging.Types.LogVerbosity
instance GHC.Classes.Eq Hydra.TUI.Logging.Types.LogVerbosity

module Hydra.TUI.Logging.Handlers
report :: Severity -> UTCTime -> Text -> EventM n [LogMessage] ()
info :: UTCTime -> Text -> EventM n [LogMessage] ()
warn :: UTCTime -> Text -> EventM n [LogMessage] ()

module Hydra.TUI.Style
severityToAttr :: Severity -> AttrName
infoA :: AttrName
positive :: AttrName
negative :: AttrName
own :: AttrName
style :: s -> AttrMap

module Hydra.TUI.Options
data Options
Options :: Host -> SocketPath -> NetworkId -> FilePath -> Options
[hydraNodeHost] :: Options -> Host
[cardanoNodeSocket] :: Options -> SocketPath
[cardanoNetworkId] :: Options -> NetworkId

-- | User key used by the tui client to commit
[cardanoSigningKey] :: Options -> FilePath
parseOptions :: Parser Options
parseCardanoNodeSocket :: Parser SocketPath
parseNodeHost :: Parser Host
parseCardanoSigningKey :: Parser FilePath
instance GHC.Show.Show Hydra.TUI.Options.Options
instance GHC.Classes.Eq Hydra.TUI.Options.Options

module Hydra.Client
data HydraEvent tx
ClientConnected :: HydraEvent tx
ClientDisconnected :: HydraEvent tx
Update :: TimedServerOutput tx -> HydraEvent tx
Tick :: UTCTime -> HydraEvent tx

-- | Handle to interact with Hydra node
data Client tx m
Client :: (ClientInput tx -> m ()) -> SigningKey PaymentKey -> (UTxO -> m ()) -> Client tx m

-- | Send some input to the server.
[sendInput] :: Client tx m -> ClientInput tx -> m ()
[sk] :: Client tx m -> SigningKey PaymentKey
[externalCommit] :: Client tx m -> UTxO -> m ()

-- | Callback for receiving server outputs.
type ClientCallback tx m = HydraEvent tx -> m ()

-- | A type tying both receiving output and sending input into a
--   <i>Component</i>.
type ClientComponent tx m a = ClientCallback tx m -> (Client tx m -> m a) -> m a

-- | Provide a component to interact with Hydra node.
withClient :: (ToJSON (ClientInput tx), FromJSON (TimedServerOutput tx)) => Options -> ClientComponent tx IO a
data ClientError
ClientJSONDecodeError :: String -> ByteString -> ClientError
instance GHC.Generics.Generic (Hydra.Client.HydraEvent tx)
instance GHC.Exception.Type.Exception Hydra.Client.ClientError
instance GHC.Generics.Generic Hydra.Client.ClientError
instance GHC.Show.Show Hydra.Client.ClientError
instance GHC.Classes.Eq Hydra.Client.ClientError
instance GHC.Classes.Eq (Hydra.API.ServerOutput.TimedServerOutput tx) => GHC.Classes.Eq (Hydra.Client.HydraEvent tx)
instance GHC.Show.Show (Hydra.API.ServerOutput.TimedServerOutput tx) => GHC.Show.Show (Hydra.Client.HydraEvent tx)

module Hydra.TUI.Model
data RootState
RootState :: Host -> UTCTime -> ConnectedState -> LogState -> RootState
[$sel:nodeHost:RootState] :: RootState -> Host
[$sel:now:RootState] :: RootState -> UTCTime
[$sel:connectedState:RootState] :: RootState -> ConnectedState
[$sel:logState:RootState] :: RootState -> LogState
data ConnectedState
Disconnected :: ConnectedState
Connected :: Connection -> ConnectedState
[$sel:connection:Disconnected] :: ConnectedState -> Connection
data IdentifiedState
Unidentified :: IdentifiedState
Identified :: Party -> IdentifiedState
data Connection
Connection :: IdentifiedState -> [NodeId] -> HeadState -> Connection
[$sel:me:Connection] :: Connection -> IdentifiedState
[$sel:peers:Connection] :: Connection -> [NodeId]
[$sel:headState:Connection] :: Connection -> HeadState
type UTxOCheckboxForm e n = Form (Map TxIn (TxOut CtxUTxO, Bool)) e n
type UTxORadioFieldForm e n = Form (TxIn, TxOut CtxUTxO) e n
type ConfirmingRadioFieldForm e n = Form Bool e n
data InitializingState
InitializingState :: [Party] -> InitializingScreen -> InitializingState
[$sel:remainingParties:InitializingState] :: InitializingState -> [Party]
[$sel:initializingScreen:InitializingState] :: InitializingState -> InitializingScreen
data InitializingScreen
InitializingHome :: InitializingScreen
CommitMenu :: UTxOCheckboxForm (HydraEvent Tx) Name -> InitializingScreen
[$sel:commitMenu:InitializingHome] :: InitializingScreen -> UTxOCheckboxForm (HydraEvent Tx) Name
ConfirmingAbort :: ConfirmingRadioFieldForm (HydraEvent Tx) Name -> InitializingScreen
[$sel:confirmingAbortForm:InitializingHome] :: InitializingScreen -> ConfirmingRadioFieldForm (HydraEvent Tx) Name
data OpenScreen
OpenHome :: OpenScreen
SelectingUTxO :: UTxORadioFieldForm (HydraEvent Tx) Name -> OpenScreen
[$sel:selectingUTxOForm:OpenHome] :: OpenScreen -> UTxORadioFieldForm (HydraEvent Tx) Name
EnteringAmount :: (TxIn, TxOut CtxUTxO) -> Form Integer (HydraEvent Tx) Name -> OpenScreen
[$sel:utxoSelected:OpenHome] :: OpenScreen -> (TxIn, TxOut CtxUTxO)
[$sel:enteringAmountForm:OpenHome] :: OpenScreen -> Form Integer (HydraEvent Tx) Name
SelectingRecipient :: (TxIn, TxOut CtxUTxO) -> Integer -> Form AddressInEra (HydraEvent Tx) Name -> OpenScreen
[$sel:utxoSelected:OpenHome] :: OpenScreen -> (TxIn, TxOut CtxUTxO)
[$sel:amountEntered:OpenHome] :: OpenScreen -> Integer
[$sel:selectingRecipientForm:OpenHome] :: OpenScreen -> Form AddressInEra (HydraEvent Tx) Name
ConfirmingClose :: ConfirmingRadioFieldForm (HydraEvent Tx) Name -> OpenScreen
[$sel:confirmingCloseForm:OpenHome] :: OpenScreen -> ConfirmingRadioFieldForm (HydraEvent Tx) Name
newtype ClosedState
ClosedState :: UTCTime -> ClosedState
[$sel:contestationDeadline:ClosedState] :: ClosedState -> UTCTime
data HeadState
Idle :: HeadState
Active :: ActiveLink -> HeadState
[$sel:activeLink:Idle] :: HeadState -> ActiveLink
data ActiveLink
ActiveLink :: UTxO -> [Party] -> HeadId -> ActiveHeadState -> ActiveLink
[$sel:utxo:ActiveLink] :: ActiveLink -> UTxO
[$sel:parties:ActiveLink] :: ActiveLink -> [Party]
[$sel:headId:ActiveLink] :: ActiveLink -> HeadId
[$sel:activeHeadState:ActiveLink] :: ActiveLink -> ActiveHeadState
data ActiveHeadState
Initializing :: InitializingState -> ActiveHeadState
[$sel:initializingState:Initializing] :: ActiveHeadState -> InitializingState
Open :: OpenScreen -> ActiveHeadState
[$sel:openState:Initializing] :: ActiveHeadState -> OpenScreen
Closed :: ClosedState -> ActiveHeadState
[$sel:closedState:Initializing] :: ActiveHeadState -> ClosedState
FanoutPossible :: ActiveHeadState
Final :: ActiveHeadState
type Name = Text
selectingUTxOFormL :: Traversal' OpenScreen (UTxORadioFieldForm (HydraEvent Tx) Name)
selectingRecipientFormL :: Traversal' OpenScreen (Form AddressInEra (HydraEvent Tx) Name)
enteringAmountFormL :: Traversal' OpenScreen (Form Integer (HydraEvent Tx) Name)
confirmingCloseFormL :: Traversal' OpenScreen (ConfirmingRadioFieldForm (HydraEvent Tx) Name)
openStateL :: Traversal' ActiveHeadState OpenScreen
initializingStateL :: Traversal' ActiveHeadState InitializingState
closedStateL :: Traversal' ActiveHeadState ClosedState
nowL :: Lens' RootState UTCTime
nodeHostL :: Lens' RootState Host
logStateL :: Lens' RootState LogState
connectedStateL :: Lens' RootState ConnectedState
connectionL :: Traversal' ConnectedState Connection
confirmingAbortFormL :: Traversal' InitializingScreen (ConfirmingRadioFieldForm (HydraEvent Tx) Name)
commitMenuL :: Traversal' InitializingScreen (UTxOCheckboxForm (HydraEvent Tx) Name)
peersL :: Lens' Connection [NodeId]
meL :: Lens' Connection IdentifiedState
headStateL :: Lens' Connection HeadState
remainingPartiesL :: Lens' InitializingState [Party]
initializingScreenL :: Lens' InitializingState InitializingScreen
activeLinkL :: Traversal' HeadState ActiveLink
utxoL :: Lens' ActiveLink UTxO
partiesL :: Lens' ActiveLink [Party]
headIdL :: Lens' ActiveLink HeadId
activeHeadStateL :: Lens' ActiveLink ActiveHeadState
fullFeedbackViewportName :: Name
shortFeedbackViewportName :: Name
emptyConnection :: Connection
newActiveLink :: [Party] -> HeadId -> ActiveLink

module Hydra.TUI.Handlers
handleEvent :: CardanoClient -> Client Tx IO -> BrickEvent Name (HydraEvent Tx) -> EventM Name RootState ()
handleExtraHotkeys :: (BrickEvent w e -> EventM n s ()) -> Event -> EventM n s ()
handleTick :: HydraEvent Tx -> EventM Name RootState ()
handleAppEventVia :: (e -> EventM n s a) -> a -> BrickEvent w e -> EventM n s a
handleVtyEventVia :: (Event -> EventM n s a) -> a -> BrickEvent w e -> EventM n s a
handleGlobalEvents :: BrickEvent Name (HydraEvent Tx) -> EventM Name RootState ()
handleHydraEventsConnectedState :: HydraEvent Tx -> EventM Name ConnectedState ()
handleVtyEventsHeadState :: CardanoClient -> Client Tx IO -> Event -> EventM Name HeadState ()
handleVtyEventsActiveLink :: CardanoClient -> Client Tx IO -> Event -> EventM Name ActiveLink ()
handleVtyEventsActiveHeadState :: CardanoClient -> Client Tx IO -> UTxO -> Event -> EventM Name ActiveHeadState ()
handleVtyEventsInitializingScreen :: CardanoClient -> Client Tx IO -> Event -> EventM Name InitializingScreen ()
handleVtyEventsOpen :: CardanoClient -> Client Tx IO -> UTxO -> Event -> EventM Name OpenScreen ()
handleVtyEventsFanoutPossible :: Client Tx IO -> Event -> EventM Name s ()
handleVtyEventsFinal :: Client Tx IO -> Event -> EventM Name s ()
handleHydraEventsConnection :: HydraEvent Tx -> EventM Name Connection ()
handleHydraEventsHeadState :: HydraEvent Tx -> EventM Name HeadState ()
handleHydraEventsActiveLink :: HydraEvent Tx -> EventM Name ActiveLink ()
handleHydraEventsInfo :: HydraEvent Tx -> EventM Name [LogMessage] ()
partyCommitted :: Party -> UTxO -> EventM n ActiveLink ()
handleBrickEventsConnection :: CardanoClient -> Client Tx IO -> BrickEvent w (HydraEvent Tx) -> EventM Name Connection ()
handleVtyEventsConnection :: CardanoClient -> Client Tx IO -> Event -> EventM Name Connection ()
handleVtyEventsLogState :: Event -> EventM Name LogState ()
scroll :: Direction -> EventM Name LogState ()
myAvailableUTxO :: NetworkId -> VerificationKey PaymentKey -> UTxO -> Map TxIn (TxOut CtxUTxO)
mkMyAddress :: CardanoClient -> Client Tx IO -> Address ShelleyAddr

module Hydra.TUI.Drawing

-- | Main draw function
draw :: CardanoClient -> Client Tx IO -> RootState -> [Widget Name]
drawScreenShortLog :: CardanoClient -> Client Tx IO -> RootState -> [Widget Name]
drawCommandPanel :: RootState -> Widget n
drawScreenFullLog :: RootState -> [Widget Name]
drawCommandList :: RootState -> Widget n
drawLogCommandList :: LogVerbosity -> Widget n
drawFocusPanelInitializing :: IdentifiedState -> InitializingState -> Widget Name
drawFocusPanelOpen :: NetworkId -> VerificationKey PaymentKey -> UTxO -> OpenScreen -> Widget Name
drawFocusPanelClosed :: UTCTime -> ClosedState -> Widget Name
drawFocusPanelFinal :: NetworkId -> VerificationKey PaymentKey -> UTxO -> Widget Name
highlightOwnAddress :: AddressInEra -> AddressInEra -> Widget n
drawFocusPanel :: NetworkId -> VerificationKey PaymentKey -> UTCTime -> Connection -> Widget Name
drawRemainingContestationPeriod :: UTCTime -> UTCTime -> Widget Name
drawTotalCommitted :: UTxO -> Widget n
drawRemainingParties :: IdentifiedState -> [Party] -> Widget n
drawPartiesWithOwnHighlighted :: Party -> [Party] -> Widget n
drawUserFeedbackFull :: [LogMessage] -> Widget n
drawUserFeedbackShort :: LogMessage -> Widget n
drawParties :: (Party -> Widget n) -> [Party] -> Widget n
drawHeadParticipants :: IdentifiedState -> [Party] -> Widget n
drawIfConnected :: (Connection -> Widget n) -> ConnectedState -> Widget n
drawIfActive :: (ActiveLink -> Widget n) -> HeadState -> Widget n
drawIfLive :: (ActiveLink -> Widget n) -> ConnectedState -> Widget n
drawPeersIfConnected :: ConnectedState -> Widget n
drawHeadId :: HeadId -> Widget n
drawMyAddress :: AddressInEra -> Widget n
drawAddress :: AddressInEra -> Widget n
drawMeIfIdentified :: IdentifiedState -> Widget n
drawConnectedStatus :: RootState -> Widget n
drawParty :: AttrName -> Party -> Widget n
drawPeers :: [NodeId] -> Widget n
drawTUIVersion :: Version -> Widget n
renderTime :: (Ord t, Num t, FormatTime t) => t -> String
drawHeadState :: ConnectedState -> Widget n
showHeadState :: HeadState -> String
drawUTxO :: (AddressInEra -> Widget n) -> UTxO -> Widget n

module Hydra.TUI
runWithVty :: IO Vty -> Options -> IO RootState
run :: Options -> IO RootState
